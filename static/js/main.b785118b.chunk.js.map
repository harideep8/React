{"version":3,"sources":["Profile.js","App.js","serviceWorker.js","index.js"],"names":["Profile","indexValue","this","props","location","data","id","specificProfile","Data","profiles","className","basicInformation","name","href","email","mobile","summary","map","i","j","exp","education","degree","institution","skillset","pro","fram","os","web","certifications","python","univercity","React","Component","Home","info","index","key","role","to","pathname","App","k","l","exact","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b785118b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Data from './data/data.json';\n\nclass Profile extends React.Component{\n    render(){\n        var indexValue=this.props.location.data.id;\n        var specificProfile=Data.profiles[indexValue];\n        return(\n            <section className=\"parent\">\n<div className=\"card\"> \n<div className=\"card-top\">\n<h3> {specificProfile.basicInformation.name} </h3>\n</div>\n\n<div className=\"card-bottom\">\n<a href={\"mailto:\"+specificProfile.basicInformation.email}> \n{specificProfile.basicInformation.email}  </a> <br />\n\n<a href={\"tel:\"+specificProfile.basicInformation.mobile}> \n{specificProfile.basicInformation.mobile}</a>\n</div>\n                \n</div>\n\n<div className=\"card2\">\n    <div className=\"card-bottom\">\n          <h2> Summary </h2>\n    </div>\n    <div className=\"card-top\">\n        {specificProfile.summary.map((i,j)=>(\n            <ul>\n            \n            <p> {i.exp} </p>\n            </ul>\n            ))}\n    </div>\n\n    <div className=\"card-bottom\">\n          <h2> Educational Qualifications</h2>\n    </div>\n\n    <div className=\"card-top\">\n        {specificProfile.education.map((i,j)=>(\n            <ul>\n            <li> {i.degree} </li>\n            <p> {i.institution} </p>\n            </ul>\n            ))}\n    </div>\n\n    <div className=\"card-bottom\">\n          <h2> Skillset</h2>\n    </div>\n    <div className=\"card-top\">\n        {specificProfile.skillset.map((i,j)=>(\n            <ul>\n            <li>{i.pro} </li><br />\n            <li> {i.fram} </li><br />\n            <li>{i.os} </li><br />\n            <li> {i.web} </li><br />\n            </ul>\n            ))}\n    </div>\n\n    <div className=\"card-bottom\">\n          <h2> Global Certifications</h2>\n    </div>\n    <div className=\"card-top\">\n        {specificProfile.certifications.map((i,j)=>(\n            <ul>\n            <li>{i.python} </li>\n            <p> {i.univercity} </p>\n            </ul>\n            ))}\n    </div>\n</div>\n\n            </section>\n        )\n    }\n}\n\nexport default Profile;\n","import React from 'react';\nimport './App.css';\nimport Profile from './Profile';\nimport Data from './data/data.json';\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\n\nfunction App(){\n  var info=Data.profiles;\n  return(\n    <section>\n      \n       <BrowserRouter>\n       <header className=\"header\">\n      {info.map((k,l)=>(\n        <Link to={{pathname:\"/profile\",data:{id:l}}} key={l}> {\"Click to View Harideep Profile\"} </Link>\n      ))}\n    \n    </header> <br/> <br/> \n        <Route exact path=\"/profile\" component={Profile} />\n        <Route exact path=\"/\" component={Home} />\n\n       \n      </BrowserRouter>\n    \n     \n      </section>\n  )\n}\n\nlet Home=()=>{\n  var info=Data.profiles;\nreturn(\n<section className=\"parent\">\n{info.map((i,index)=>(\n        <div className=\"card\" key={index}>\n          <div className=\"card-top\">\n          <h2> {i.basicInformation.name} </h2> <br />\n      <h5> <em> {i.basicInformation.role}</em></h5>\n      </div>\n\n      <div className=\"card-bottom\">\n        <a href={\"mailto:\"+i.basicInformation.email}> {i.basicInformation.email}  </a> <br />\n\n        <a href={\"tel:\"+i.basicInformation.mobile}> {i.basicInformation.mobile}</a> <br />\n        <Link to={{pathname:\"/profile\",data:{id:index}}}> View Profile </Link>\n      </div>\n        </div>\n      ))}\n      <section className=\"parent\">\n\n      </section>\n</section>\n)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}